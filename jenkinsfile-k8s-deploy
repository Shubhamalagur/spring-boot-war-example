pipeline {
    agent any
    tools {
       maven 'maven'
    }
    environment{
        VERSION = "${env.BUILD_ID}"
    }
    stages {
        stage('pull source code') {
            steps {
                checkout scmGit(branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/sudhakarbastawade2303/spring-boot-war-example.git']])
            }
        }
        stage('Build') {
            steps {
                sh 'mvn clean package'
            }
        }
        stage('Static Code Analysis') {
            environment {
            SONAR_URL = "http://34.125.47.253:9000"
            }
            steps {
                script {
                    //   withCredentials([string(credentialsId: 'sonarqube_id', variable: 'SONAR_AUTH_TOKEN')]) {
                        withSonarQubeEnv(credentialsId: 'sonarqube_id') {
                        sh 'mvn sonar:sonar'
                    }
                    timeout(time: 1, unit: 'HOURS') {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                    }
                }
            }
        }
        stage("docker build & docker push"){
            steps{
                script{
                    withCredentials([string(credentialsId: 'docker', variable: 'docker_password')]) {
                             sh '''
                                docker build -t shubham177501/helm-deploy:${VERSION} .
                                docker login -u shubham177501 -p $docker_password
                                docker push shubham177501/helm-deploy:${VERSION}
                                docker rmi shubham177501/helm-deploy:${VERSION}
                            '''
                    }
                }
            }
        }
        /*
        stage('manual approval'){
            steps{
                script{
                    timeout(10) {
                        mail bcc: '', body: "<br>Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> Go to build url and approve the deployment request <br> URL de build: ${env.BUILD_URL}", cc: '', charset: 'UTF-8', from: '', mimeType: 'text/html', replyTo: '', subject: "${currentBuild.result} CI: Project name -> ${env.JOB_NAME}", to: "devops.classes.online@gmail.com";  
                        input(message: "Deploy ${params.project_name}?", ok: 'Deploy')
                    }
                }
            }
        }*/
        stage('Deploying application on k8s cluster') {
            steps {
              script{
                  // withCredentials([kubeconfigFile(credentialsId: 'KUBECONFIG', variable: 'KUBECONFIG')]) {
		       withCredentials([file(credentialsId: 'KUBECONFIG', variable: 'KUBECONFIG')]) {
		       dir('kubernetes/') {
                          sh 'helm upgrade --install --set image.repository="sudhakarbastawade/helm-deploy" --set image.tag="${VERSION}" myjavaapp myapp/ ' 
                        }
                    }
              }
            }
        }
        
    }
}